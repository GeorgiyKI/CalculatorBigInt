using BigInt = System.Numerics.BigInteger;
using Calc = CalculatorTask.Calculator;
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestCalculator
{
    [TestClass]
    public class Plus
    {
        [TestMethod]
        public void FirstTest()
        {
            string firstNumber = "12345678";
            string secondNumber = "87654322";

            string expected = "99990000";

            string result = Calc.Plus(firstNumber, secondNumber);

            Assert.AreNotEqual(expected, result);
        }

        [TestMethod]
        public void SecondTest()
        {
            string firstNumber = "12345679";
            string secondNumber = "87654321";

            string expected = "99990000";

            string result = Calc.Plus(firstNumber, secondNumber);

            Assert.AreNotEqual(expected, result);
        }

        [TestMethod]
        public void ThirdTest()
        {
            string firstNumber = "1263912741287482712938012942856182739128310641288312904612746129381296412854612938102937218581256842739183091264864712938124880947123812903824";
            string secondNumber = "938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746";

            BigInt firstBigInt = BigInt.Parse(firstNumber);
            BigInt secondBigInt = BigInt.Parse(secondNumber);

            string expected = Convert.ToString(firstBigInt + secondBigInt);
            string result = Calc.Plus(firstNumber, secondNumber);

            Assert.AreEqual(expected, result);
        }

    }

    [TestClass]
    public class Multiply
    {
        [TestMethod]
        public void FirstTest()
        {
            string firstNumber = "1000";
            string secondNumber = "2";

            string expected = "2000";

            string result = Calc.Multiply(firstNumber, secondNumber);

            Assert.AreEqual(expected, result);
        }

        [TestMethod]
        public void SecondTest()
        {
            string firstNumber = "938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746";
            string secondNumber = "938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746";

            BigInt firstBigInt = BigInt.Parse(firstNumber);
            BigInt secondBigInt = BigInt.Parse(secondNumber);

            string expected = Convert.ToString(firstBigInt * secondBigInt);
            string result = Calc.Multiply(firstNumber, secondNumber);

            Assert.AreEqual(expected, result);
        }
    }

    [TestClass]
    public class Substruct
    {
        [TestMethod]
        public void FirstTest()
        {
            string firstNumber = "99990000";
            string secondNumber = "9999999";

            string expected = "902550001";

            string result = Calc.Subtract(firstNumber, secondNumber);

            Assert.AreNotEqual(expected, result);
        }

        [TestMethod]
        public void SecondTest()
        {
            string firstNumber = "938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746";
            string secondNumber = "938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612749380129428569380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127493801294285618273912831064128831290461274693893801294285618273912831064128831290461274601294285618273912831064128831290461274693801294285618273912831064128831290461274661827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739912831064128831290461274601294285618273919128310641288312904612746012942856182739128310641288312904612746938019128310641288312904612746012942856182739128310641288312904612746938019128310641288312904612746012942856182739128310641288312904612746938019128310641288312904612746012942856182739128310641288312904612746938012831064128831290461274693801912831064128831290461274601294285618273912831064128831290461274693801128310641288312904612746938012942856182739128310641288312904612746912831064128831290461274601294285618273912831064912831064128831290461274601294285618273912831064128831290461274693801128831290461274693801912831064128831290491283106412883129046127460129428561827391283106412883129046127469380161274601294285618273912831064128831290461274693801";

            BigInt firstBigInt = BigInt.Parse(firstNumber);
            BigInt secondBigInt = BigInt.Parse(secondNumber);

            string expected = Convert.ToString(firstBigInt - secondBigInt);
            string result = Calc.Subtract(firstNumber, secondNumber);

            Assert.AreEqual(expected, result);
        }

        [TestMethod]
        public void ThirdTest()
        {
            string firstNumber = "938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612749380129428569380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127493801294285618273912831064128831290461274693893801294285618273912831064128831290461274601294285618273912831064128831290461274693801294285618273912831064128831290461274661827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739912831064128831290461274601294285618273919128310641288312904612746012942856182739128310641288312904612746938019128310641288312904612746012942856182739128310641288312904612746938019128310641288312904612746012942856182739128310641288312904612746938019128310641288312904612746012942856182739128310641288312904612746938012831064128831290461274693801912831064128831290461274601294285618273912831064128831290461274693801128310641288312904612746938012942856182739128310641288312904612746912831064128831290461274601294285618273912831064912831064128831290461274601294285618273912831064128831290461274693801128831290461274693801912831064128831290491283106412883129046127460129428561827391283106412883129046127469380161274601294285618273912831064128831290461274693801";
            string secondNumber = "938012942856938012942856182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612749380129428561827391283106412883129046127469389380129428561827391283106412883129046127460129428561827391283106412883129046127469380129428561827391283106412883129046127466182739128310641288312904612746938938012942856182739128310641288312904612746012942856182739128310641288312904612746938012942856182739128310641288312904612746";

            BigInt firstBigInt = BigInt.Parse(firstNumber);
            BigInt secondBigInt = BigInt.Parse(secondNumber);

            string expected = Convert.ToString(firstBigInt - secondBigInt);
            string result = Calc.Subtract(firstNumber, secondNumber);

            Assert.AreEqual(expected, result);
        }
    }

    [TestClass]
    public class Exception
    {
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void NumberHaveUnDigitChar()
        {
            string firstNumber = "99990)000";
            string secondNumber = "9999999";
            string result = Calc.Subtract(firstNumber, secondNumber);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void NumberHaveLetter()
        {
            string firstNumber = "99990f000";
            string secondNumber = "9999999";
            string result = Calc.Subtract(firstNumber, secondNumber);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void NumberIsNegative()
        {
            string firstNumber = "-99990000";
            string secondNumber = "9999999";
            string result = Calc.Subtract(firstNumber, secondNumber);
        }

    }


}
